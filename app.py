# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pz7jJa4GZ47VaGw2RmsdSWudUhtYexmY
"""

# app.py (versi untuk Random Forest)

import streamlit as st
import numpy as np
import pandas as pd
import joblib
import os

# --- Fungsi untuk memuat semua objek ---
# Menggunakan cache agar tidak perlu load ulang setiap kali ada interaksi
@st.cache_data
def load_objects():
    """Memuat semua model dan objek preprocessing yang diperlukan."""
    # Tentukan path ke file-file model
    model_path = "model_rf_final.pkl"
    imputer_path = "imputer.pkl"
    encoder_path = "label_encoder.pkl"
    features_path = "feature_names.pkl"

    # Periksa apakah semua file ada
    if not all(os.path.exists(p) for p in [model_path, imputer_path, encoder_path, features_path]):
        return None, None, None, None

    model = joblib.load(model_path)
    imputer = joblib.load(imputer_path)
    label_encoder = joblib.load(encoder_path)
    feature_names = joblib.load(features_path)
    return model, imputer, label_encoder, feature_names

# Muat semua objek saat aplikasi dimulai
model, imputer, label_encoder, feature_names = load_objects()

# --- Konfigurasi Halaman dan Tampilan Utama ---
st.set_page_config(page_title="Prediksi Topik Skripsi", layout="wide")

# Tampilkan error jika file model tidak ditemukan
if model is None:
    st.error(
        "‚ùå File model tidak ditemukan! Pastikan file-file berikut ada di direktori yang sama dengan `app.py`:\n"
        "- `model_rf_final.pkl`\n"
        "- `imputer.pkl`\n"
        "- `label_encoder.pkl`\n"
        "- `feature_names.pkl`"
    )
    st.stop()

st.title("üéì Aplikasi Prediksi Topik Skripsi")
st.write(
    "Aplikasi ini menggunakan model **Random Forest** untuk memberikan rekomendasi "
    "topik skripsi berdasarkan nilai mata kuliah mahasiswa."
)
st.markdown("---")


# --- Form Input Nilai ---
with st.form("prediction_form"):
    st.subheader("üìù Masukkan Nilai Mata Kuliah Mahasiswa (Skala 0-100)")

    # Buat kolom agar form lebih rapi dan tidak terlalu panjang
    num_features = len(feature_names)
    num_cols = 3  # Tampilkan dalam 3 kolom
    cols = st.columns(num_cols)

    # Dictionary untuk menampung nilai input dari pengguna
    input_data = {}

    # Buat input field untuk setiap fitur secara dinamis
    for i, feature in enumerate(feature_names):
        with cols[i % num_cols]:
            input_data[feature] = st.number_input(
                label=f"{feature}",
                min_value=0.0,
                max_value=100.0,
                value=75.0,  # Nilai default
                step=1.0,
                key=feature
            )

    # Tombol submit form
    submitted = st.form_submit_button("üöÄ Prediksi Topik Saya")

# --- Logika Prediksi dan Tampilan Hasil ---
if submitted:
    try:
        # Urutkan input sesuai dengan urutan fitur saat training
        input_list = [input_data[feature] for feature in feature_names]

        # 1. Konversi ke numpy array 2D
        input_array = np.array(input_list).reshape(1, -1)

        # 2. Terapkan imputasi (menggunakan .transform, bukan .fit_transform)
        # Langkah ini penting untuk konsistensi pipeline, meskipun input dari form tidak ada yang kosong.
        imputed_input = imputer.transform(input_array)

        # CATATAN: Langkah scaling DIHILANGKAN sesuai script training terbaru

        # 3. Lakukan prediksi dengan model Random Forest
        prediction_code = model.predict(imputed_input)

        # 4. Dapatkan probabilitas prediksi untuk setiap kelas
        prediction_proba = model.predict_proba(imputed_input)

        # 5. Ubah kode prediksi kembali ke label asli (nama topik)
        prediction_label = label_encoder.inverse_transform(prediction_code)[0]
        confidence_score = prediction_proba[0][prediction_code[0]] * 100

        # Tampilkan hasil dengan gaya
        st.success(f"**Rekomendasi Topik Skripsi:**")
        st.subheader(f"üéØ {prediction_label}")
        st.info(f"**Tingkat Keyakinan Model:** {confidence_score:.2f}%")

        # Tampilkan detail probabilitas (opsional, tapi informatif)
        with st.expander("Lihat Detail Probabilitas untuk Semua Topik"):
            proba_df = pd.DataFrame(
                prediction_proba,
                columns=label_encoder.classes_,
                index=['Probabilitas']
            ).T * 100
            proba_df.rename(columns={'Probabilitas': 'Peluang (%)'}, inplace=True)
            st.dataframe(proba_df.style.format("{:.2f}%").highlight_max(axis=0, color='lightgreen'))

    except Exception as e:
        st.error(f"Terjadi kesalahan saat melakukan prediksi: {e}")